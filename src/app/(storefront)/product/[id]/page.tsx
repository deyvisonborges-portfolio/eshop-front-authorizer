import { Button } from "@/@lib-ui"
import { productsService } from "@/modules/store/features/products/api/products.service"
import { ProductDetailsPage } from "@/modules/store/features/products/pages/details/details.page"
import { ProductDetailsSkeleton } from "@/modules/store/features/products/pages/details/skeleton"
import { Suspense } from "react"

type PageProps = {
  params: Promise<{ id: string }>
  searchParams?: Promise<{ size?: string; color?: string }>
}

async function ProductDetails({ params, searchParams }: PageProps) {
  const { id } = await params
  const filters = searchParams ? await searchParams : {}

  const product = await productsService.getProductByIdAndParams(id, filters, {
    cache: "force-cache",
    next: { tags: ["product", `product-${id}`] },
  })
  const serverTime = new Date().toISOString()

  console.log(serverTime)

  return <ProductDetailsPage product={product} serverTimestamp={serverTime} />
}

/**
 * @description
 * Essa fun√ß√£o n√£o √© async, pois n√£o:
 * - Faz nenhuma opera√ß√£o ass√≠ncrona diretamente;
 * - Ela n√£o faz fetch de dados diretamente;
 * - O efeito de Streaming do Next.js funciona corretamente;
 * - O Next.js n√£o precisa esperar nada antes de come√ßar a renderizar.
 *
 * O Suspense permite que o resto da p√°gina seja renderizado enquanto ProductDetails busca os dados.
 * O ProductDetailsSkeleton √© exibido at√© os dados estarem prontos.
 *
 * Se ProductDetailsAppPage fosse async, o Next.js s√≥ come√ßaria a renderizar a p√°gina
 * inteira depois de buscar os dados, o que quebraria o efeito de streaming do Suspense. üöÄ
 *
 * Se renderizarmos de forma assincrona, funciona, porem:
 * - O Next.js vai esperar a resolu√ß√£o da fun√ß√£o antes de renderizar a p√°gina.
 * - Toda a renderiza√ß√£o da p√°gina ser√° bloqueada at√© que a Promise resolva. Isso quebraria o Streaming do Next.js.
 * Obs.: quando usamos o generateMetadata por exemplo, que √© assincrono, ele bloqueia toda a renderizacao
 *
 * // Interessante observar
 * @link https://dev.to/peterlidee/synchronous-and-asynchronous-searchparams-in-next-15-3c7a
 */
export default function ProductDetailsAppPage({
  params,
  searchParams,
}: // TODO: to implement https://www.youtube.com/shorts/CNGIAZ2ZBpw?feature=share
PageProps) {
  return (
    /**
     * @description
     * - O Suspense permite que o Next.js carregue partes da p√°gina enquanto espera os dados, exibindo ProductDetailsSkeleton no lugar.
     * - Carregamento parcial dentro da mesma p√°gina
     * - Nao permite carregamento global (antes da p√°gina ser vis√≠vel)
     * - Carregamento de uma se√ß√£o espec√≠fica
     * - Nao faz o carregamento de uma nova p√°gina
     * - Como so tenho esse caso em especifico, nao vou me preocupar em criar o loading.tsx
     */

    <Suspense fallback={<ProductDetailsSkeleton />}>
      <ProductDetails params={params} searchParams={searchParams} />
    </Suspense>
  )
}

// // generateMetadata s√≠ncrono, usando dados passados pelo layout.
// export async function generateMetadata({ params, searchParams }: PageProps) {
//   const { id } = await params;
//   const filters = (await searchParams) || {};

//   const product = await productsService.getProductByIdAndParams(id, filters, {
//     cache: "default",
//     next: { revalidate: 3 },
//   });

//   return {
//     title: product.name,
//     description: product.description,
//   };
// }
